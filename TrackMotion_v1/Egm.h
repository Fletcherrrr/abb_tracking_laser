#pragma once
#include "stdafx.h"
#include <WinSock2.h>
#include <iostream>
#include <fstream>

#include "egm.pb.h" // generated by Google protoc.exe



#pragma comment(lib, "Ws2_32.lib")      // socket lib
//#pragma comment(lib, "libprotobuf.lib") // protobuf lib
using namespace std;
using namespace abb::egm;

class Egm
{
private:

	unsigned int nPortNumber;
	unsigned int nSequenceNumber;
	SOCKET sockegm; //UdpUc socket for communicating with the EGM module in ABB. Sent message is the Planned Pose. Received message is the current pose from the ABB.
	int n;
	struct sockaddr_in serverAddr, clientAddr; //Server is PC (Sensor) 192.168.125.204:6510, Client is the ABB robot 192.168.125.1:6510
	string szAddrPC; //May not be used. The ipaddress will be in the consructor function
	int iLenAddr;
	char chProtoMessage[1400]; //Received Message (Serialized)
	string szMessageBuffer; //Message to be send (Serialized)

public:
	Egm(string szIP, unsigned int nPort);
	//~Egm(void);

	/******************************/
	/* Main Variables and Methods */
	/******************************/

	/*Variables of planned coordinates of the robot*/
	// If want to send new coordinates to the Robot, please modify these paramenters.
	struct pose{
		struct{
			double x;
			double y;
			double z;
		}pos;
		struct{
			double q1;
			double q2;
			double q3;
			double q4;
		}ori;
	};
	pose posePlanned; // Planned pose to be sent to EGM.
	// If want to use current coordinates of the Robot, please read these below paramenters.
	pose poseFeedback; //Feedback pose from the EGM.
    int nSeqNoRob; //seqNo of the current EGM queue.

	/*Methods*/
	int FetchRobotMessage();  //If return -1, no data was received. 
	void CreateAndSendSensorMessage();


	/************************************/
	/* Additional Variables and Methods */
	/************************************/
	/* Additional variables for calculating the coordinates to be send to EGM*/


	/*Additional methods for calculating the coordinates to be send to EGM*/
	void CalculatePlannedPose();


};